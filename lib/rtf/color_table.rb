require 'stringio'

module RTF
  # This class represents a table of colors used within a RTF document. This
  # class need not be directly instantiated as it will be used internally by,
  # and can be obtained from a Document object.
  class ColorTable
    # This is the constructor for the ColorTable class.
    #
    # ==== Parameters
    # *colors::  An array of zero or more colors that make up the color
    #             table entries.
    def initialize(*colors)
      @colors = []
      colors.each {|color| add(color)}
    end

    # This method fetches a count of the number of colors within a color
    # table.
    def size
      @colors.size
    end

    # This method adds a new color to a ColorTable object. If the color
    # already exists within the table or is not a Color object then this
    # method does nothing.
    #
    # ==== Parameters
    # color::  The color to be added to the table.
    def add(color)
      if color.instance_of?(Color)
        @colors.push(color) if @colors.index(color).nil?
      end
      self
    end

    # This method iterates over the contents of a ColorTable object. This
    # iteration does not include the implicit default color entry.
    def each
      if block_given?
        @colors.each {|color| yield color}
      end
    end

    # This method overloads the array dereference operator for the ColorTable
    # class. It is not possible to dereference the implicit default color
    # using this method. An invalid index will return a nil value.
    #
    # ==== Parameters
    # index::  The index of the color to be retrieved.
    def [](index)
      @colors[index]
    end

    # This method retrieves the index of a specified color within the table.
    # If the color doesn't exist within the table then nil is returned. It
    # should be noted that the index of a color will be one more than its
    # order of entry to account for the implicit default color entry.
    #
    # ==== Parameters
    # color::  The color to retrieve the index of.
    def index(color)
      index = @colors.index(color)
      index.nil? ? index : index + 1
    end

    # This method generates a textual description for a ColorTable object.
    #
    # ==== Parameters
    # indent::  The number of spaces to prefix to the lines generated by the
    #           method. Defaults to zero.
    def to_s(indent=0)
      prefix = indent > 0 ? ' ' * indent : ''
      text   = StringIO.new

      text << "#{prefix}Color Table (#{@colors.size} colors)"
      @colors.each {|color| text << "\n#{prefix}   #{color}"}

      text.string
    end

    # This method generates the RTF text for a ColorTable object.
    #
    # ==== Parameters
    # indent::  The number of spaces to prefix to the lines generated by the
    #           method. Defaults to zero.
    def to_rtf(indent=0)
      prefix = indent > 0 ? ' ' * indent : ''
      text   = StringIO.new

      text << "#{prefix}{\\colortbl\n#{prefix};"
      @colors.each {|color| text << "\n#{prefix}#{color.to_rtf}"}
      text << "\n#{prefix}}"

      text.string
    end

    alias << add
  end
end